/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2016 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    IMPESFoam

Description
    Reservoir simulation through the IMPES method

\*---------------------------------------------------------------------------*/

#include "fvCFD.H"
#include "fvOptions.H"
#include "simpleControl.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

int main(int argc, char *argv[])
{
    #include "setRootCase.H"

    #include "createTime.H"
    #include "createMesh.H"

    simpleControl simple(mesh);

    #include "createFields.H"
    #include "createFvOptions.H"

    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

    

    Foam::dimensioned<double> avgP = sum(mesh.V()*P)/sum(mesh.V());

    while (simple.loop())
    {
        Info<< "Time = " << runTime.timeName() << nl << endl;

        while (simple.correctNonOrthogonal())
        {
	    /*Brooks and Corey calculation of rel perms*/
 	    kro = kroMax * Foam::pow((((1-Sw) - Sor) / (1-Sor-Swr)),kroCoefA);
	    krw = krwMax * Foam::pow(((Sw - Swr) / (1-Sor-Swr)),krwCoefA);
	    double g = 9.81;
    	    Info<< "\nCalculating Pressure Distribution\n" << endl;
            fvScalarMatrix PEqn
            (
            rhoOil * g * perm * fvm::laplacian(kro, P) == rhoWater * g * perm * fvm::laplacian(krw, P)  
            );
	    Info<< "\nCalculating Saturation Distribution\n" << endl;
	    fvScalarMatrix SwEqn
            (
            fvm::ddt(Sw) == g * perm / nuWater * fvc::laplacian(krw, P) 
	    );


            fvOptions.constrain(PEqn);
	 
            PEqn.solve();
	    SwEqn.solve();
            fvOptions.correct(P);
	    /*fvOptions.correct(SwEqn);*/
        }

        #include "write.H"

        Info<< "ExecutionTime = " << runTime.elapsedCpuTime() << " s"
            << "  ClockTime = " << runTime.elapsedClockTime() << " s"
            << nl << endl;
    }

    Info<< "End\n" << endl;

    return 0;
}


// ************************************************************************* //
